import std.Mem;
import std.Sys;
import std.lang.Characters;

/*
 * The smallest possible radix for converting to/from strings
 * into numbers.
 */
MIN_RADIX := 2;

/*
 * The largest possible radix for converting to/from strings
 * into numbers.
 */
MAX_RADIX := 36;

String :: record {

	length: u32;
	buffer: c8*;

	String() {}

	String(buffer: c8*) {
		this.length = Mem.strlen(buffer);
		this.buffer = new c8[length + 1]; // +1 for null terminator
		Mem.memcpy(this.buffer, buffer, length + 1);
	}

	String(buffer: c8*, length: u32) {
		this.length = length;
		this.buffer = new c8[length + 1]; // +1 for null terminator
		Mem.memcpy(this.buffer, buffer, length);
		this.buffer[length] = '\0';
	}

	/*
	 * Parses the string into a signed integer width
	 * a radix of 10 (Base-10).
	 *
	 * Valid character pattern: [+-]?[0-9]+
	 *
	 * @return  a parsed signed integer.
	 */
	parseInt() -> i32 {
		return parseInt(10);
	}

	/*
	 * Parses the string into a signed integer
	 * for the given radix. All the characters in
	 * the string (excluding a leading + or -)
	 * must all be digits of the given radix.
	 *
	 * @param   radix to be used during parsing
	 * @return  a parsed signed integer.
	 */
	parseInt(radix: u32) -> i32 {
		// TODO: Replace with actual error handling!

		if (empty()) {
			Sys.println("NumberException: empty string");
			Sys.exit(1);
		}

		if radix < MIN_RADIX {
			Sys.println("NumberException: radix < 2");
			Sys.exit(1);
		}

		if radix > MAX_RADIX {
			Sys.println("NumberException: radix too large");
			Sys.exit(1);
		}

		isNeg := false;
		i := 0;

		// Maybe it has a leading + or -
		firstCh: c8 = buffer[0];
		if firstCh < '0' {
			if firstCh == '-' {
				isNeg = true;
			} else if firstCh != '+' {
				Sys.println("NumberException: Invalid sequence start");
				Sys.exit(1);
			}

			if length == 1 {
				Sys.println("NumberException: + or - by itself");
				Sys.exit(1);
			}

			++i; // Move over the + or - character
		}
		
		result: i32;  prevVal: i32;
		loop i < length {
			ch := buffer[i++];
			digit :i32 = Characters.toDigitForRadix(ch, radix);

			if digit < 0 {
				Sys.println("NumberException: Character was not a digit");
				Sys.exit(1);
			}

			prevVal = result;
			result = result * radix + digit;

			if result / radix < prevVal {
				Sys.println("NumberException: Overflow");
				Sys.exit(1);
			}
		}

		return isNeg ? -result |> result;
	}

	empty() -> bool {
		return length == 0;
	}
}

from(i: i32) -> String {
	if i == 0 {
		return String("0");
	}

	res := String();
	isNeg: bool = i < 0;
	
	if isNeg { ++res.length; }
	else     { i = -i;       }
	
	iCount: i32 = i;
	loop iCount < 0 {
		iCount /= 10;
		++res.length;
	}
	
	res.buffer = new c8[res.length + 1];
	scan: i32 = res.length - 1;
	loop i < 0 {
		res.buffer[scan--] = cast(c8)(-(i % 10)) + '0';
		i /= 10;
	}
	
	if isNeg {
		res.buffer[scan] = '-';
	}
	
	res.buffer[res.length] = '\0';
	return res;
}

concat(a: String, b: String) -> String {
	totalLength: i32 = a.length + b.length;
	newString: c8* = new c8[totalLength];
	Mem.memcpy(newString, a.buffer, a.length);
	Mem.memcpy(newString + a.length, b.buffer, b.length);
	return String(newString, totalLength);
}