import std.os.Win32;
import std.Mem;
import std.lang.String;
import std.io.InStream;

/*
 * Stream to read from standard input.
 */
stdin := InStream(Win32.GetStdHandle(-10));

writeToHandle(handle :void*, msg :c8*, length :u32) {
	numberOfBytesWritten :u32;
	Win32.WriteFile(handle, msg, length, &numberOfBytesWritten, null);
}


// Functions for writing to std out.
//----------------------------------------------

print(msg :c8*, length :u32) {
	writeToHandle(Win32.GetStdHandle(-11), msg, length);
}

println(msg :c8*) {
	print(msg);
	println();
}

println() {
	ln :c8 = '\n';
	print(&ln, 1);
}

print(msg :c8*) {
	print(msg, Mem.strlen(msg));
}

print(msg :String) {
	print(msg.buffer, msg.length);
}

println(msg :String) {
	print(msg);
	println();
}

print(i :i32) {
	print(String.from(i));
}

println(i :i32) {
	print(i);
	println();
}

/*
 * Runs at startup to ensure
 * certain functionality is ran
 * right as the application begins.
 */
initialize() {
	Win32.QueryPerformanceFrequency(&performanceFrequency);
}

/*
 * Stops the current application from running.
 */
exit(exitCode :u32) {
	Win32.ExitProcess(exitCode);
}


// Used to keep track of time
performanceFrequency :i64;

currentNanoTime() -> i64 {
	current :i64;
	Win32.QueryPerformanceCounter(&current);
	return cast(i64) ((cast(f64) current/performanceFrequency) * 1E+9);
}