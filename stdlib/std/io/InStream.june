import std.os.Win32;
import std.os.Unix;
import std.lang.String;
import std.io.File;
import std.io.FileFlags;
import std.Sys;
import std.Err;
import std.ErrKind;

InStream :: record {

#if OS_WINDOWS	
	handle: void*;
#elif OS_UNIX
	handle: i32;
#endif

#if OS_WINDOWS
	InStream(handle: void*) {
		this.handle = handle;
	}
#elif OS_UNIX
	InStream(handle: i32) {
		this.handle = handle;
	}
#endif

	read(buffer: c8*, len: u32) -> u32 {
		numberOfBytersRead: u32;
#if OS_WINDOWS
		Win32.ReadFile(handle, buffer, len, &numberOfBytersRead, null);
#elif OS_UNIX
		numberOfBytersRead = cast(u32) Unix.read(handle, buffer, len);
#endif
		return numberOfBytersRead;
	}

	readLine() -> String {
		buffer: c8[1024];
#if OS_WINDOWS
		amountRead: i32 = read(buffer, buffer.length);
		// -2 because \r\n
		return String(buffer, amountRead - 2);
#elif OS_UNIX
		// Reading character by character until a new line character
		// is found.
		amountRead: i32;
		ptr: c8* = buffer;
		loop i := 0; i < buffer.length; i++ {
			if read(ptr, 1) == 0 || *ptr == '\n' {
				break;
			}
			++ptr;
			++amountRead;
		}
		return String(buffer, amountRead);
#endif
	}

	readInt() -> (i32, Err) {
		return readLine().parseInt();
	}

	close() {
#if OS_WINDOWS
		Win32.CloseHandle(handle);
#elif OS_UNIX
		Unix.close(handle);
#endif
	}
}

open(file: File, flags: u32) -> (InStream, Err) {
	return open(file.path, flags);
}

open(path: c8*, flags: u32) -> (InStream, Err) {

#if OS_WINDOWS	
		accessFlags := 0u;
		shareFlags  := 0u;
		createFlags := 0u;
		
		if flags == 0 {
			accessFlags = Win32.GENERIC_ALL;
		}
		
		if (flags & FileFlags.IN) != 0 {
			accessFlags |= Win32.GENERIC_READ;
		}
		
		if (flags & FileFlags.OUT) != 0 {
			accessFlags |= Win32.GENERIC_WRITE;
		}
		
		if (flags & FileFlags.SHARE) != 0 {
			shareFlags |= Win32.FILE_SHARE_READ;
		}
		
		if (flags & FileFlags.CREATE) != 0 {
			createFlags |= Win32.CREATE_NEW;
		} else {
			createFlags |= Win32.OPEN_EXISTING;
		}
		
		handle := Win32.CreateFileA(path,
		                            accessFlags,
								    shareFlags,
								    null,
								    createFlags,
								    Win32.FILE_ATTRIBUTE_NORMAL,
								    null);
		
		if handle == Win32.INVALID_HANDLE_VALUE {
			return (InStream(handle), Err(ErrKind.FILE_IO, "Failed to open file stream"));
		}

		return (InStream(handle), Err.ok());
#elif OS_UNIX
	// TODO: Unix!
		return (InStream(0), Err.ok());
#endif

}