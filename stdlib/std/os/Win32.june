#if OS_WINDOWS

/*===----------------------------------------===*\
 *                                              *
 * Win32: winnt.h                               *
 *                                              *
\*===----------------------------------------===*/

// TODO: Will want to replace with comptime values once supported!
GENERIC_READ    := 0x80000000i;
GENERIC_WRITE   := 0x40000000i;
GENERIC_EXECUTE := 0x20000000i;
GENERIC_ALL     := 0x10000000i;

FILE_SHARE_READ                      := 0x00000001;
FILE_SHARE_WRITE                     := 0x00000002;
FILE_SHARE_DELETE                    := 0x00000004;
FILE_ATTRIBUTE_READONLY              := 0x00000001;
FILE_ATTRIBUTE_HIDDEN                := 0x00000002;
FILE_ATTRIBUTE_SYSTEM                := 0x00000004;
FILE_ATTRIBUTE_DIRECTORY             := 0x00000010;
FILE_ATTRIBUTE_ARCHIVE               := 0x00000020;
FILE_ATTRIBUTE_DEVICE                := 0x00000040;
FILE_ATTRIBUTE_NORMAL                := 0x00000080;
FILE_ATTRIBUTE_TEMPORARY             := 0x00000100;
FILE_ATTRIBUTE_SPARSE_FILE           := 0x00000200;
FILE_ATTRIBUTE_REPARSE_POINT         := 0x00000400;
FILE_ATTRIBUTE_COMPRESSED            := 0x00000800;
FILE_ATTRIBUTE_OFFLINE               := 0x00001000;
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED   := 0x00002000;
FILE_ATTRIBUTE_ENCRYPTED             := 0x00004000;
FILE_ATTRIBUTE_INTEGRITY_STREAM      := 0x00008000;
FILE_ATTRIBUTE_VIRTUAL               := 0x00010000;
FILE_ATTRIBUTE_NO_SCRUB_DATA         := 0x00020000;
FILE_ATTRIBUTE_EA                    := 0x00040000;
FILE_ATTRIBUTE_PINNED                := 0x00080000;
FILE_ATTRIBUTE_UNPINNED              := 0x00100000;
FILE_ATTRIBUTE_RECALL_ON_OPEN        := 0x00040000;
FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS := 0x00400000;

/*===----------------------------------------===*\
 *                                              *
 * Win32: processenv.h                          *
 *                                              *
\*===----------------------------------------===*/

native GetStdHandle(nStdHandle :u32) -> void*;

native SetStdHandle(nStdHandle :u32, hHandle :void*) -> i32;

/*===----------------------------------------===*\
 *                                              *
 * Win32: fileapi.h                             *
 *                                              *
\*===----------------------------------------===*/

native WriteFile(hFile                  :void*,
                 lpBuffer               :void*,
                 nNumberOfBytesToWrite  :u32,
                 lpNumberOfBytesWritten :u32*,
                 lpOverlapped           :void*   /* Ignored data structure */
                 ) -> i32;

native ReadFile(hFile                  :void*,
                lpBuffer               :void*,
                nNumberOfBytesToWrite  :u32,
                lpNumberOfBytesWritten :u32*,
                lpOverlapped           :void*   /* Ignored data structure */
                ) -> i32;

native CreateFileA(lpFileName            :c8*,
                   dwDesiredAccess       :u32,
                   dwShareMode           :u32,
                   lpSecurityAttributes  :void*, // TODO: Support for security attributes?
                   dwCreationDisposition :u32,
                   dwFlagsAndAttributes  :u32,
                   hTemplateFile         :void*
                   ) -> void*;

// TODO: Will want to replace with comptime values once supported!
CREATE_NEW        := 1;
CREATE_ALWAYS     := 2;
OPEN_EXISTING     := 3;
OPEN_ALWAYS       := 4;
TRUNCATE_EXISTING := 5;

/*===----------------------------------------===*\
 *                                              *
 * Win32: synchapi.h                            *
 *                                              *
\*===----------------------------------------===*/

native Sleep(dwMilliseconds :u32);

/*===----------------------------------------===*\
 *                                              *
 * Win32: libloaderapi.h                        *
 *                                              *
\*===----------------------------------------===*/

native ExitProcess(uExitCode :u32);

/*===----------------------------------------===*\
 *                                              *
 * Win32: profileapi.h                          *
 *                                              *
\*===----------------------------------------===*/

native QueryPerformanceFrequency(lpFrequency :i64*) -> bool;
native QueryPerformanceCounter(lpPerformanceCount :i64*) -> bool;

/*===----------------------------------------===*\
 *                                              *
 * Win32: handleapi.h                           *
 *                                              *
\*===----------------------------------------===*/

// TODO: Will want to replace with comptime values once supported!
INVALID_HANDLE_VALUE :void* = cast(void*) -1L;

native CloseHandle(hObject :void*) -> i32;

#endif