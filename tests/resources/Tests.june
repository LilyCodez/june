// Because tests need to be written to STD-OUT this file
// a small helpful file for outputting to STD-OUT.

strlen(str: c8*) -> u32 {
	len: u32 = 0;
	ptr: c8* = str;
	loop *ptr != '\0' {
		++ptr;
		++len;
	}
	return len;
}

#if OS_WINDOWS

native GetStdHandle(nStdHandle: u32) -> void*;

native WriteFile(hFile:                  void*,
                 lpBuffer:               void*,
                 nNumberOfBytesToWrite:  u32,
                 lpNumberOfBytesWritten: u32*,
                 lpOverlapped:           void*   /* Ignored data structure */
                 ) -> i32;

#elif OS_UNIX

native write(fildes: i32, buf: void*, nbytes: osint);

#endif

#if OS_WINDOWS
writeToHandle(handle: void*, msg: c8*, length: u32) {
	numberOfBytesWritten: u32;
	WriteFile(handle, msg, length, &numberOfBytesWritten, null);
}
#endif

#if OS_UNIX
writeToHandle(handle: i32, msg: c8*, length: u32) {
	write(handle, msg, length);
}
#endif

print(msg: c8*, length: u32) {
#if OS_WINDOWS
	writeToHandle(GetStdHandle(-11), msg, length);
#elif OS_UNIX
	writeToHandle(1, msg, length);
#endif
}

print(msg: c8*) {
	print(msg, strlen(msg));
}

print(msg: c8) {
	print(&msg, 1);
}

print(i: i32) {
	if i == 0 {
		print("0");
		return;
	}

	isNeg: bool = i < 0;
	
	buffer: c8[100];
	bufLen: i32;

	if isNeg { ++bufLen; }
	else     { i = -i;   }
	
	iCount: i32 = i;
	loop iCount < 0 {
		iCount /= 10;
		++bufLen;
	}
	
	scan: i32 = bufLen - 1;
	loop i < 0 {
		buffer[scan--] = cast(c8)(-(i % 10)) + '0';
		i /= 10;
	}
	
	if isNeg {
		buffer[scan] = '-';
	}
	
	buffer[bufLen] = '\0';
	
	print(buffer);
}